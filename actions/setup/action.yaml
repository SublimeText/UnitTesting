name: Setup the testing environment for Sublime Text
description: Setup the testing environment for Sublime Text
inputs:
  package-name:
    description: Package name. Derived from repo name if empty.
    default: ''
  sublime-text-version:
    description: Sublime Text Version (3 or 4).
    required: true
    default: 4
  sublime-text-arch:
    description: Sublime Text Version Arch. It could be x32 for Sublime Text 3.
    required: true
    default: x64
  install-package:
    description: Whether to install the checked out package.
    required: true
    default: true
  package-path:
    description: Where the package is located.
    required: true
    default: './'
  install-unittesting:
    description: Whether to install UnitTesting (DEPRECATED, replaced by SublimeText/UnitTesting/actions/setup@ref).
    required: true
    default: true
  unittesting-version:
    description: Version of UnitTesting (DEPRECATED, replaced by SublimeText/UnitTesting/actions/setup@ref).
    required: false
    default: ''
  install-coverage:
    description: Whether to install coverage (DEPRECATED, no longer used).
    required: true
    default: true
  coverage-version:
    description: Version of coverage (DEPRECATED, no longer used).
    required: false
    default: ''
  install-package-control:
    description: Whether to install package control.
    required: true
    default: true
  extra-packages:
    description: |
      A list of extra packages seperated by newline of the form `package:user/repo@ref`
      or just `user/repo@ref` if the repo name is the same as the package name. `@ref` could
      be either a branch name, a tag name , or a prefix of tags e.g. `st3-` or simply left
      empty. If an exact match is not found, the latest tag is determined by semver x.y.z.
    required: false
  display:
    description: internal and experimental only
    required: true
    default: xvfb
  window-manager:
    description: internal and experimental only
    required: true
    default: icevm
runs:
  using: 'composite'
  steps:
    - name: Setup Environment Variables
      run: |
        echo "SUBLIME_TEXT_VERSION=${{ inputs.sublime-text-version }}" >> $GITHUB_ENV
        echo "SUBLIME_TEXT_ARCH=${{ inputs.sublime-text-arch }}" >> $GITHUB_ENV
      shell: bash
    - name: Setup SUBLIME_TEXT_PACKAGES
      run: |
        if [ $SUBLIME_TEXT_VERSION -ge 4 ]; then
            if [ $(uname) = 'Darwin' ]; then
                STP="$HOME/Library/Application Support/Sublime Text/Packages"
            elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
                STP="$HOME/.config/sublime-text/Packages"
            else
                STP="/c/st/Data/Packages/"
            fi
        else
            if [ $(uname) = 'Darwin' ]; then
                STP="$HOME/Library/Application Support/Sublime Text $SUBLIME_TEXT_VERSION/Packages"
            elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
                STP="$HOME/.config/sublime-text-$SUBLIME_TEXT_VERSION/Packages"
            else
                STP="/c/st/Data/Packages/"
            fi
        fi
        echo "SUBLIME_TEXT_PACKAGES=$STP" >> $GITHUB_ENV
      shell: bash
    - name: Setup Sublime Text Path
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          echo "c:\st" >> $GITHUB_PATH
        else
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        fi
      shell: bash
    - name: Setup Graphical User Interface
      if: runner.os == 'Linux'
      run: |
        sudo bash $GITHUB_ACTION_PATH/install_ubuntu_sys_req.sh
        echo "DISPLAY=:1" >> $GITHUB_ENV

        if [ "${{ inputs.display }}" = "xvfb" ]; then
          sudo apt-get install xvfb
        elif [ "${{ inputs.display }}" = "turbovnc" ]; then
          wget https://phoenixnap.dl.sourceforge.net/project/turbovnc/2.2.5/turbovnc_2.2.5_amd64.deb
          sudo dpkg -i turbovnc_2.2.5_amd64.deb
          echo "/opt/TurboVNC/bin" >> $GITHUB_PATH
        fi
        if [ "${{ inputs.display }}" != "false" ]; then
          if [ "${{ inputs.window-manager }}" = "xfce" ]; then
            sudo apt-get install --no-install-recommends xfce4 xfce4-goodies dbus-x11
          elif [ "${{ inputs.window-manager }}" = "icewm" ]; then
            sudo apt-get install icewm
          elif [ "${{ inputs.window-manager }}" = "fluxbox" ]; then
            sudo apt-get install fluxbox
          fi
        fi
      shell: bash
    - name: Start Graphical User Interface
      if: runner.os == 'Linux'
      run: |
        if [ "${{ inputs.display }}" = "xvfb" ]; then
          Xvfb $DISPLAY -screen 0 1024x768x24 -ac +extension GLX +render -noreset &
          sleep 1
          if [ "${{ inputs.window-manager }}" = "xfce" ]; then
            nohup startxfce4 &
          elif [ "${{ inputs.window-manager }}" = "icewm" ]; then
            nohup icewm &
          elif [ "${{ inputs.window-manager }}" = "fluxbox" ]; then
            nohup fluxbox &
          fi
        elif [ "${{ inputs.display }}" = "turbovnc" ]; then
          mkdir $HOME/.vnc
          echo $RANDOM$RANDOM | vncpasswd -f > $HOME/.vnc/passwd
          chmod 0600 $HOME/.vnc/passwd
          if [ "${{ inputs.window-manager }}" = "xfce" ]; then
            vncserver $DISPLAY -geometry 1024x768 -depth 24 -wm "startxfce4"
          elif [ "${{ inputs.window-manager }}" = "false" ]; then
            vncserver $DISPLAY -geometry 1024x768 -depth 24
          else
            vncserver $DISPLAY -geometry 1024x768 -depth 24 -wm "${{ inputs.window-manager }}"
          fi
        fi
      shell: bash
    - name: Install Sublime Text
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        bash $GITHUB_ACTION_PATH/install_sublime_text.sh
      shell: bash
    - name: Install Sublime Text
      if: runner.os == 'Windows'
      run: |
        pwsh $Env:GITHUB_ACTION_PATH/install_sublime_text.ps1 --verbose
      shell: pwsh
    - name: Confugure Git
      run: |
        # Disable warnings about detached HEAD
        # https://stackoverflow.com/questions/36794501
        git config --global advice.detachedHead false

        # block sublime text website ip
        bash $GITHUB_ACTION_PATH/block_ip.sh
      shell: bash
    - name: Determine Test Package
      run: |
        REPO="$GITHUB_REPOSITORY"
        if [ "${{ inputs.install-package }}" = "true" ]; then
          cd "${{ inputs.package-path }}"
          REMOTEURL=$(git config --get remote.origin.url || true)
          cd -
          if [[ "$REMOTEURL" =~ ^https://github.com/ ]]; then
            REPO=${REMOTEURL#https://github.com/}
            REPO=${REPO%\.git}
          fi
        fi
        PACKAGE_FROM_INPUTS="${{ inputs.package-name }}"
        PACKAGE="${PACKAGE_FROM_INPUTS:-${REPO#*/}}"

        echo "PACKAGE=$PACKAGE" >> $GITHUB_ENV
      shell: bash
    - name: Install Packages
      run: |
        . $GITHUB_ACTION_PATH/utils.sh

        # Copy plugin files to Packages/<Package> folder if files are checked out.
        if [ "${{ inputs.install-package }}" = "true" ]; then
          cd "${{ inputs.package-path }}"
          if [ -d "./.git" ] && [ ! -d "$SUBLIME_TEXT_PACKAGES/$PACKAGE" ]; then
              # symlink does not play well with coverage
              echo "Copy checked out package '$PACKAGE' to $SUBLIME_TEXT_PACKAGES/$PACKAGE"
              mkdir -p "$SUBLIME_TEXT_PACKAGES/$PACKAGE"
              cp -r ./ "$SUBLIME_TEXT_PACKAGES/$PACKAGE"
              # detached head will crash package control
              rm -rf "$SUBLIME_TEXT_PACKAGES/$PACKAGE/.git"
          fi
          cd -
        fi

        # Install extra packages to to Packages/<Package>
        while read -r x; do
            if [[ "$x" =~ ^(.*):(.*)/([^@]*)@?(.*)$ ]]; then
                PKG="${BASH_REMATCH[1]}"
                USER="${BASH_REMATCH[2]}"
                REPO="${BASH_REMATCH[3]}"
                SHA="${BASH_REMATCH[4]}"
            elif [[ "$x" =~ ^(.*)/([^@]*)@?(.*)$ ]]; then
                PKG="${BASH_REMATCH[2]}"
                USER="${BASH_REMATCH[1]}"
                REPO="${BASH_REMATCH[2]}"
                SHA="${BASH_REMATCH[3]}"
            else
              continue
            fi
            InstallPackage "$PKG" "https://github.com/$USER/$REPO" "$SHA"
        done <<< "${{ inputs.extra-packages }}"

        # Install UnitTesting to Packages/UnitTesting if not yet exists
        if [ ! -d "$SUBLIME_TEXT_PACKAGES/UnitTesting" ]; then
            echo "Copy action's 'UnitTesting' to $SUBLIME_TEXT_PACKAGES/UnitTesting"
            mkdir -p "$SUBLIME_TEXT_PACKAGES/UnitTesting"
            cp -r "$GITHUB_ACTION_PATH/../../" "$SUBLIME_TEXT_PACKAGES/UnitTesting"
        fi
      shell: bash
    - name: Install Package Control
      if: (runner.os == 'Linux' || runner.os == 'macOS') && inputs.install-package-control == 'true'
      run: |
        bash $GITHUB_ACTION_PATH/install_package_control.sh
      shell: bash
    - name: Install Package Control
      if: runner.os == 'Windows' && inputs.install-package-control == 'true'
      run: |
        pwsh $Env:GITHUB_ACTION_PATH/install_package_control.ps1 --verbose
      shell: pwsh
