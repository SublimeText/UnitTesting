name: Setup the testing environment for Sublime Text
description: Setup the testing environment for Sublime Text
inputs:
  package-name:
    description: Package name. Derived from repo name if empty.
    default: ''
  sublime-text-version:
    description: Sublime Text Version (3 or 4).
    required: true
    default: 4
  sublime-text-arch:
    description: Sublime Text Version Arch. It could be x32 for Sublime Text 3.
    required: true
    default: x64
  install-package:
    description: Whether to install the checked out package.
    required: true
    default: true
  install-unittesting:
    description: Whether to install UnitTesting.
    required: true
    default: true
  unittesting-version:
    description: Version of UnitTesting. Use latest release if empty.
    required: false
    default: ''
  install-coverage:
    description: Whether to install coverage.
    required: true
    default: true
  coverage-version:
    description: Version of coverage. Use latest release if empty.
    required: false
    default: ''
  install-package-control:
    description: Whether to install package control.
    required: true
    default: true
  extra-packages:
    description: |
      A list of extra packages seperated by newline of the from package:user/repo@tag
      or just user/repo@tag if the repo name is the same as the repo name.
    required: false

runs:
  using: 'composite'
  steps:
    - name: Set environmental variables
      run: |
        echo "SUBLIME_TEXT_VERSION=${{ inputs.sublime-text-version }}" >> $GITHUB_ENV
        echo "SUBLIME_TEXT_ARCH=${{ inputs.sublime-text-arch }}" >> $GITHUB_ENV
      shell: bash
    - name: Setup SUBLIME_TEXT_PACKAGES
      run: |
        if [ $SUBLIME_TEXT_VERSION -ge 4 ]; then
            if [ $(uname) = 'Darwin' ]; then
                STP="$HOME/Library/Application Support/Sublime Text/Packages"
            elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
                STP="$HOME/.config/sublime-text/Packages"
            else
                STP="/c/st/Data/Packages/"
            fi
        else
            if [ $(uname) = 'Darwin' ]; then
                STP="$HOME/Library/Application Support/Sublime Text $SUBLIME_TEXT_VERSION/Packages"
            elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
                STP="$HOME/.config/sublime-text-$SUBLIME_TEXT_VERSION/Packages"
            else
                STP="/c/st/Data/Packages/"
            fi
        fi
        echo "SUBLIME_TEXT_PACKAGES=$STP" >> $GITHUB_ENV
      shell: bash
    - run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          echo "c:\st" >> $GITHUB_PATH
        else
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        fi
      shell: bash
    - if: runner.os == 'Linux'
      run: |
        sudo bash $GITHUB_ACTION_PATH/../../scripts/install_ubuntu_sys_req.sh
        echo "DISPLAY=:1" >> $GITHUB_ENV
        sudo cp $GITHUB_ACTION_PATH/../../scripts/xvfb /etc/init.d/xvfb
        sudo chmod +x /etc/init.d/xvfb
      shell: bash
    - if: runner.os == 'Linux'
      run: sudo sh -e /etc/init.d/xvfb start
      shell: bash
    - if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        bash $GITHUB_ACTION_PATH/../../scripts/install_sublime_text.sh
      shell: bash
    - if: runner.os == 'Windows'
      run: |
        pwsh $Env:GITHUB_ACTION_PATH/../../scripts/install_sublime_text.ps1 --verbose
      shell: pwsh
    - run: |
        # Disable warnings about detached HEAD
        # https://stackoverflow.com/questions/36794501
        git config --global advice.detachedHead false

        # block sublime text website ip
        bash $GITHUB_ACTION_PATH/../../scripts/block_ip.sh
      shell: bash
    - run: |
        PACKAGE="${{ inputs.package-name }}"
        PACKAGE="${PACKAGE:-${GITHUB_REPOSITORY#*/}}"

        . $GITHUB_ACTION_PATH/../../scripts/utils.sh

        # Copy plugin files to Packages/<Package> folder if files are checked out.
        if [ "${{ inputs.install-package }}" = "true" ]; then
          if [ -d "./.git" ] && [ ! -d "$SUBLIME_TEXT_PACKAGES/$PACKAGE" ]; then
              # symlink does not play well with coverage
              echo "copy the package to sublime package directory"
              mkdir -p "$SUBLIME_TEXT_PACKAGES/$PACKAGE"
              cp -r ./ "$SUBLIME_TEXT_PACKAGES/$PACKAGE"
          fi
        fi

        if [ "${{ inputs.install-unittesting }}" = "true" ]; then
            InstallPackage "UnitTesting" "https://github.com/SublimeText/UnitTesting" "${{ inputs.unittesting-version }}"
        fi
        if [ "${{ inputs.install-coverage }}" = "true" ]; then
            InstallPackage "coverage" "https://github.com/codexns/sublime-coverage" "${{ inputs.coverage-version }}"
        fi

        while read -r x; do
            if [[ "$x" =~ ^(.*):(.*)/(.*)@(.*)$ ]]; then
                PKG="${BASH_REMATCH[1]}"
                USER="${BASH_REMATCH[2]}"
                REPO="${BASH_REMATCH[3]}"
                SHA="${BASH_REMATCH[4]}"
            elif [[ "$x" =~ ^(.*)/(.*)@(.*)$ ]]; then
                PKG="${BASH_REMATCH[2]}"
                USER="${BASH_REMATCH[1]}"
                REPO="${BASH_REMATCH[2]}"
                SHA="${BASH_REMATCH[3]}"
            else
              continue
            fi
            InstallPackage "$PKG" "https://github.com/$USER/$REPO" "$SHA"
        done <<< "${{ inputs.extra-packages }}"

      shell: bash
    - if: (runner.os == 'Linux' || runner.os == 'macOS') && inputs.install-package-control == 'true'
      run: |
        bash $GITHUB_ACTION_PATH/../../scripts/install_package_control.sh
      shell: bash
    - if: runner.os == 'Windows' && inputs.install-package-control == 'true'
      run: |
        pwsh $Env:GITHUB_ACTION_PATH/../../scripts/install_package_control.ps1 --verbose
      shell: pwsh
