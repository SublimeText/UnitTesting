# NOTE: These params need to mirror exactly those of ci.ps1
[CmdletBinding()]
param(
    [Parameter(Mandatory = $false, Position = 0)]
    [string]$command,
    [Parameter(Mandatory = $false)]
    [switch] $coverage
)


# Scripts other than the bootstrapper are located here.
$global:UnitTestingPowerShellScriptsDirectory = $env:TEMP

if (!$env:UNITTESTING_BOOTSTRAPPED) {
    write-output "[UnitTesting] bootstrapping environment..."

    # UTF8 encoding without preamble.
    $local:utf8 = [System.Text.UTF8Encoding]::new($false)

    # Files encoded in base64 encoding. They need to be unpacked before they can be used.
    # !!! Every time they change, they need to be regenerated and copied here. !!!
    $local:encodedDependencies = @(
    'utils.ps1@@@CmZ1bmN0aW9uIGVuc3VyZUNyZWF0ZURpcmVjdG9yeSB7CiAgICBwYXJhbShbc3RyaW5nXSRQYXRoKQogICAgW3ZvaWRdKG5ldy1pdGVtIC1pdGVtdHlwZSBkICIkUGF0aCIgLWZvcmNlIC1lcnJvcmFjdGlvbiBzdG9wKQp9CgpmdW5jdGlvbiBlaXRoZXJPciB7CiAgICBwYXJhbSgkTGVmdCwgJFJpZ2h0KQogICAgaWYgKCRMZWZ0KSB7ICRMZWZ0IH0gZWxzZSB7ICRSaWdodCB9Cn0KCmZ1bmN0aW9uIG51bGxPciB7CiAgICBwYXJhbSgkTGVmdCwgJFJpZ2h0KQogICAgaWYgKCRMZWZ0IC1lcSAkbnVsbCkgeyAkTGVmdCB9IGVsc2UgeyAkUmlnaHQgfQp9CgpmdW5jdGlvbiB0b0xvZ01lc3NhZ2UgewogICAgcGFyYW0oW3N0cmluZ10kY29udGVudCkKICAgICJbVW5pdFRlc3RpbmddICRjb250ZW50Igp9CgpmaWx0ZXIgbG9nVmVyYm9zZSB7CiAgICBwYXJhbShbc3RyaW5nXSRtZXNzYWdlKQogICAgd3JpdGUtdmVyYm9zZSAodG9Mb2dNZXNzYWdlIChlaXRoZXJPciAkXyAkbWVzc2FnZSkpCn0KCmZpbHRlciBsb2dXYXJuaW5nIHsKICAgIHBhcmFtKFtzdHJpbmddJG1lc3NhZ2UpCiAgICB3cml0ZS13YXJuaW5nICh0b0xvZ01lc3NhZ2UgKGVpdGhlck9yICRfICRtZXNzYWdlKSkKfQoKZnVuY3Rpb24gZW5zdXJlQ29weURpcmVjdG9yeUNvbnRlbnRzIHsKICAgIHBhcmFtKFtzdHJpbmddJFBhdGgsIFtzdHJpbmddJERlc3RpbmF0aW9uKQogICAgY29weS1pdGVtICIkUGF0aFwqIiAtcmVjdXJzZSAtZm9yY2UgJERlc3RpbmF0aW9uIC1lcnJvcmFjdGlvbiBzdG9wCn0KCmZ1bmN0aW9uIGVuc3VyZVJlbW92ZURpcmVjdG9yeSB7CiAgICBwYXJhbShbc3RyaW5nXSRQYXRoKQogICAgaWYgKFtTeXN0ZW0uSU8uUGF0aC5GaWxlXS5FeGlzdHMoKGNvbnZlcnQtcGF0aCAkUGF0aCkpKSB7CiAgICAgICAgdGhyb3cgImV4cGVjdGVkIGEgZGlyZWN0b3J5LCBnb3QgYSBmaWxlOiAkUGF0aCIKICAgIH0KICAgIHJlbW92ZS1pdGVtICIkUGF0aCIgLXJlY3Vyc2UgLWZvcmNlIC1lcnJvcmFjdGlvbiBzdG9wCn0KCmZ1bmN0aW9uIGdpdEZldGNoTGF0ZXN0VGFnRnJvbVJlcG9zaXRvcnkgewogICAgcGFyYW0oW3N0cmluZ10kVXJsVG9SZXBvc2l0b3J5KQogICAgZ2l0IGxzLXJlbW90ZSAtLXRhZ3MgIiRVcmxUb1JlcG9zaXRvcnkiIHwgJXskXyAtcmVwbGFjZSAiLiovKC4qKSQiLCAnJDEnfSBgCiAgICAgICAgfCB3aGVyZS1vYmplY3QgeyRfIC1ub3RtYXRjaCAiXF4ifSB8JXtbU3lzdGVtLlZlcnNpb25dJF99IGAKICAgICAgICB8IHNvcnQgfCBzZWxlY3Qtb2JqZWN0IC1sYXN0IDEgfCAleyAiJF8iIH0KfQoKZnVuY3Rpb24gZ2l0Q2xvbmVUYWcgewogICAgcGFyYW0oW3N0cmluZ10kVGFnLCBbc3RyaW5nXSRSZXBvc2l0b3J5VXJsLCBbc3RyaW5nXSREZXN0aW5hdGlvbikKICAgIGdpdCBjbG9uZSAtLXF1aWV0IC0tZGVwdGggMSAtLWJyYW5jaD0kVGFnICRSZXBvc2l0b3J5VXJsICIkRGVzdGluYXRpb24iIDI+JG51bGwKfQoKZnVuY3Rpb24gZ2l0R2V0SGVhZFJldmlzaW9uTmFtZSB7CiAgICBwYXJhbShbc3RyaW5nXSRSZXBvc2l0b3J5RGlyZWN0b3J5KQogICAgZ2l0IC1DICRSZXBvc2l0b3J5RGlyZWN0b3J5IHJldi1wYXJzZSBIRUFECn0KCmZ1bmN0aW9uIGdldExhdGVzdFVuaXRUZXN0aW5nQnVpbGRUYWcgewogICAgcGFyYW0oW3N0cmluZ10kVGFnLCBbc3RyaW5nXSRTdWJsaW1lVGV4dFZlcnNpb24sIFtzdHJpbmddJFVybFRvVW5pdFRlc3RpbmcpCiAgICAkcmVzdWx0ID0gJFRhZwogICAgaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRUYWcpKXsKICAgICAgICBpZiAoJFN1YmxpbWVUZXh0VmVyc2lvbiAtZXEgMikgewogICAgICAgICAgICAkcmVzdWx0ID0gJzAuMTAuNicKICAgICAgICB9IGVsc2VpZiAoJFN1YmxpbWVUZXh0VmVyc2lvbiAtZXEgMykgewogICAgICAgICAgICAkcmVzdWx0ID0gZ2l0RmV0Y2hMYXRlc3RUYWdGcm9tUmVwb3NpdG9yeSAkVXJsVG9Vbml0VGVzdGluZwogICAgICAgIH0KICAgIH0KICAgICRyZXN1bHQKfQoKZnVuY3Rpb24gZ2V0UmVwb3NpdG9yeVRhZyB7CiAgICBwYXJhbShbc3RyaW5nXSRQcmVmZXJyZWRUYWcsIFtzdHJpbmddJFJlcG9zaXRvcnlVcmwpCiAgICBpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJFByZWZlcnJlZFRhZykpIHsgZ2l0RmV0Y2hMYXRlc3RUYWdGcm9tUmVwb3NpdG9yeSAkUmVwb3NpdG9yeVVybCB9CiAgICBlbHNlIHsgJFByZWZlcnJlZFRhZyB9Cn0KCmZ1bmN0aW9uIGNsb25lUmVwb3NpdG9yeVRhZyB7CiAgICBwYXJhbShbc3RyaW5nXSRQcmVmZXJyZWRUYWcsIFtzdHJpbmddJFJlcG9zaXRvcnlVcmwsIFtzdHJpbmddJERlc3RpbmF0aW9uKQogICAgJFRhZyA9IGdldFJlcG9zaXRvcnlUYWcgJFByZWZlcnJlZFRhZyAkUmVwb3NpdG9yeVVybAogICAgbG9nVmVyYm9zZSAiY2xvbmluZyAkKHNwbGl0LXBhdGggJFJlcG9zaXRvcnlVcmwgLWxlYWYpIHRhZzogJFRhZyBpbnRvICREZXN0aW5hdGlvbi4uLiIKICAgIGdpdENsb25lVGFnICRUYWcgJFJlcG9zaXRvcnlVcmwgJERlc3RpbmF0aW9uCiAgICBnaXRHZXRIZWFkUmV2aXNpb25OYW1lICREZXN0aW5hdGlvbiB8IGxvZ1ZlcmJvc2UKICAgIGxvZ1ZlcmJvc2UgIiIKfQoKZnVuY3Rpb24gZ2V0TGF0ZXN0Q29sb3JTY2hlbWVVbml0VGFnIHsKICAgIHBhcmFtKFtzdHJpbmddJFRhZywgW3N0cmluZ10kVXJsVG9Db2xvclNjaGVtZVVuaXQpCiAgICBpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJFRhZykpIHsgZ2l0RmV0Y2hMYXRlc3RUYWdGcm9tUmVwb3NpdG9yeSAkVXJsVG9Db2xvclNjaGVtZVVuaXQgfQogICAgZWxzZSB7ICRUYWcgfQp9CgpmdW5jdGlvbiBlbnN1cmVDcmVhdGVEaXJlY3RvcnlKdW5jdGlvbiB7CiAgICBwYXJhbShbc3RyaW5nXSRMaW5rLCBbc3RyaW5nXSRUYXJnZXQpCiAgICBjbWQuZXhlIC9jIG1rbGluayAvSiAiJExpbmsiICIkVGFyZ2V0IgogICAgaWYgKCRMQVNURVhJVENPREUgLW5lIDApIHsgdGhyb3cgImNvdWxkIG5vdCBjcmVhdGUgZGlyZWN0b3J5IGp1bmN0aW9uIGF0ICRMaW5rIHRvICRUYXJnZXQiIH0KfQoKZnVuY3Rpb24gZW5zdXJlVmFsdWUgewogICAgcGFyYW0oJFZhbHVlLCBbc3RyaW5nXSRQYXR0ZXJuPSdeLiokJywgW3N0cmluZ10kTWVzc2FnZT0kbnVsbCkKICAgIGlmKCgkVmFsdWUgLWVxICRudWxsKSAtb3IgKCRWYWx1ZSAtbm90bWF0Y2ggJFBhdHRlcm4pKSB7CiAgICAgICAgdGhyb3cgKGVpdGhlck9yICRNZXNzYWdlICJ2YWx1ZSBpcyBudWxsIG9yIHVuZXhwZWN0ZWQgKGV4cGVjdGVkIG1hdGNoOiAkUGF0dGVybjsgZ290OiAkVmFsdWUpIikKICAgIH0KICAgICRWYWx1ZQp9CgpmdW5jdGlvbiBwYXRoRXhpc3RzIHsKICAgIHBhcmFtKFtzdHJpbmddJFBhdGgsIFtzd2l0Y2hdJE5lZ2F0ZT0kRmFsc2UpCiAgICBpZiAoISROb3QpIHsgdGVzdC1wYXRoICRQYXRoIH0gZWxzZSB7ICEodGVzdC1wYXRoICRQYXRoKSB9Cn0KCmZ1bmN0aW9uIGluc3RhbGxQYWNrYWdlRm9yU3VibGltZVRleHRWZXJzaW9uM0lmTm90UHJlc2VudCB7CiAgICBwYXJhbShbc3RyaW5nXSRQYXRoLCBbc3RyaW5nXSRQcmVmZXJyZWRUYWcsIFtzdHJpbmddJFJlcG9zaXRvcnlVcmwpCiAgICBpZiAoJElzU3VibGltZVRleHRWZXJzaW9uMyAtYW5kIChwYXRoRXhpc3RzIC1OZWdhdGUgJFBhdGgpKSB7CiAgICAgICAgY2xvbmVSZXBvc2l0b3J5VGFnICRQcmVmZXJyZWRUYWcgJFJlcG9zaXRvcnlVcmwgJFBhdGgKICAgIH0KfQ==',
    'ci.ps1@@@W0NtZGxldEJpbmRpbmcoKV0KcGFyYW0oCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRmYWxzZSwgUG9zaXRpb24gPSAwKV0KICAgIFtzdHJpbmddJGNvbW1hbmQsCiAgICBbUGFyYW1ldGVyKE1hbmRhdG9yeSA9ICRmYWxzZSldCiAgICBbc3dpdGNoXSAkY292ZXJhZ2UKKQoKIyBUT0RPOiBCb290c3RyYXAgdGhlIGJvb3RzdHJhcHBlci4gU2VlIGFwcHZleW9yLnBzMS4KJGdsb2JhbDpVbml0VGVzdGluZ1Bvd2VyU2hlbGxTY3JpcHRzRGlyZWN0b3J5ID0gJGVudjpURU1QCgouICRVbml0VGVzdGluZ1Bvd2VyU2hlbGxTY3JpcHRzRGlyZWN0b3J5XGNpX2NvbmZpZy5wczEKLiAkVW5pdFRlc3RpbmdQb3dlclNoZWxsU2NyaXB0c0RpcmVjdG9yeVx1dGlscy5wczEKCmZ1bmN0aW9uIEJvb3RzdHJhcCB7CiAgICBbQ21kbGV0QmluZGluZygpXQogICAgcGFyYW0oW3N3aXRjaF0gJHdpdGhfY29sb3Jfc2NoZW1lX3VuaXQpCiAgICAKICAgIGVuc3VyZUNyZWF0ZURpcmVjdG9yeSAkU3VibGltZVRleHRQYWNrYWdlc0RpcmVjdG9yeQoKICAgICMgQ29weSBwbHVnaW4gZmlsZXMgdG8gUGFja2FnZXMvPFBhY2thZ2U+IGZvbGRlci4KICAgIGlmICgkUGFja2FnZVVuZGVyVGVzdE5hbWUgLWVxICRTeW1ib2xDb3B5QWxsKXsKICAgICAgICBsb2dWZXJib3NlICJjcmVhdGluZyBkaXJlY3RvcnkgZm9yIHBhY2thZ2UgdW5kZXIgdGVzdCBhdCAkUGFja2FnZVVuZGVyVGVzdFN1YmxpbWVUZXh0UGFja2FnZXNEaXJlY3RvcnkuLi4iCiAgICAgICAgZW5zdXJlQ3JlYXRlRGlyZWN0b3J5ICRQYWNrYWdlVW5kZXJUZXN0U3VibGltZVRleHRQYWNrYWdlc0RpcmVjdG9yeQogICAgICAgIGxvZ1ZlcmJvc2UgImNvcHlpbmcgY3VycmVudCBkaXJlY3RvcnkgY29udGVudHMgdG8gJFBhY2thZ2VVbmRlclRlc3RTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5Li4uIgogICAgICAgICMgVE9ETzogY3JlYXRlIGp1bmN0aW9ucyBmb3IgYWxsIHBhY2thZ2VzLgogICAgICAgIGVuc3VyZUNvcHlEaXJlY3RvcnlDb250ZW50cyAuICRTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5CiAgICB9IGVsc2UgewogICAgICAgIGxvZ1ZlcmJvc2UgImNyZWF0aW5nIGRpcmVjdG9yeSBqdW5jdGlvbiB0byBwYWNrYWdlIHVuZGVyIHRlc3QgYXQgJFBhY2thZ2VVbmRlclRlc3RTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5Li4uIgogICAgICAgIGVuc3VyZUNyZWF0ZURpcmVjdG9yeUp1bmN0aW9uICRQYWNrYWdlVW5kZXJUZXN0U3VibGltZVRleHRQYWNrYWdlc0RpcmVjdG9yeSAuCiAgICB9CgogICAgIyBDbG9uZSBVbml0VGVzdGluZyBpbnRvIFBhY2thZ2VzL1VuaXRUZXN0aW5nLgogICAgaWYgKHBhdGhFeGlzdHMgLU5lZ2F0ZSAkVW5pdFRlc3RpbmdTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5KSB7CiAgICAgICAgJFVOSVRURVNUSU5HX1RBRyA9IGdldExhdGVzdFVuaXRUZXN0aW5nQnVpbGRUYWcgJGVudjpVTklUVEVTVElOR19UQUcgJFN1YmxpbWVUZXh0VmVyc2lvbiAkVW5pdFRlc3RpbmdSZXBvc2l0b3J5VXJsCiAgICAgICAgbG9nVmVyYm9zZSAiZG93bmxvYWQgVW5pdFRlc3RpbmcgdGFnOiAkVU5JVFRFU1RJTkdfVEFHIgogICAgICAgIGdpdENsb25lVGFnICRVTklUVEVTVElOR19UQUcgVW5pdFRlc3RpbmdSZXBvc2l0b3J5VXJsICRVbml0VGVzdGluZ1N1YmxpbWVUZXh0UGFja2FnZXNEaXJlY3RvcnkKICAgICAgICBnaXRHZXRIZWFkUmV2aXNpb25OYW1lICRVbml0VGVzdGluZ1N1YmxpbWVUZXh0UGFja2FnZXNEaXJlY3RvcnkgfCBsb2dWZXJib3NlCiAgICAgICAgbG9nVmVyYm9zZSAiIgogICAgfQoKICAgICMgQ2xvbmUgY292ZXJhZ2UgcGx1Z2luIGludG8gUGFja2FnZXMvY292ZXJhZ2UuCiAgICBpbnN0YWxsUGFja2FnZUZvclN1YmxpbWVUZXh0VmVyc2lvbjNJZk5vdFByZXNlbnQgJENvdmVyYWdlU3VibGltZVRleHRQYWNrYWdlc0RpcmVjdG9yeSAkZW52OkNPVkVSQUdFX1RBRyAkQ29udmVyYWdlUmVwb3NpdG9yeVVybAoKICAgICYgIiRVbml0VGVzdGluZ1N1YmxpbWVUZXh0UGFja2FnZXNEaXJlY3Rvcnlcc2JpblxpbnN0YWxsX3N1YmxpbWVfdGV4dC5wczEiIC12ZXJib3NlCn0KCmZ1bmN0aW9uIEluc3RhbGxQYWNrYWdlQ29udHJvbCB7CiAgICByZW1vdmUtaXRlbSAkQ292ZXJhZ2VTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5IC1Gb3JjZSAtUmVjdXJzZQogICAgJiAiJFVuaXRUZXN0aW5nU3VibGltZVRleHRQYWNrYWdlc0RpcmVjdG9yeVxzYmluXGluc3RhbGxfcGFja2FnZV9jb250cm9sLnBzMSIgLXZlcmJvc2UKfQoKZnVuY3Rpb24gSW5zdGFsbENvbG9yU2NoZW1lVW5pdCB7CiAgICBpbnN0YWxsUGFja2FnZUZvclN1YmxpbWVUZXh0VmVyc2lvbjNJZk5vdFByZXNlbnQgJENvbG9yU2NoZW1lVW5pdFN1YmxpbWVUZXh0UGFja2FnZXNEaXJlY3RvcnkgJGVudjpDT0xPUl9TQ0hFTUVfVU5JVF9UQUcgJENvbG9yU2NoZW1lVW5pdFJlcG9zaXRvcnlVcmwKfQoKZnVuY3Rpb24gSW5zdGFsbEtleXByZXNzIHsKICAgIGluc3RhbGxQYWNrYWdlRm9yU3VibGltZVRleHRWZXJzaW9uM0lmTm90UHJlc2VudCAkS2V5UHJlc3NTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5ICRlbnY6S0VZUFJFU1NfVEFHICRLZXlQcmVzc1JlcG9zaXRvcnlVcmwKfQoKZnVuY3Rpb24gUnVuVGVzdHMgewogICAgW0NtZGxldEJpbmRpbmcoKV0KICAgIHBhcmFtKAogICAgICAgIFtzd2l0Y2hdICRzeW50YXhfdGVzdCwKICAgICAgICBbc3dpdGNoXSAkY29sb3Jfc2NoZW1lX3Rlc3QsCiAgICAgICAgW3N3aXRjaF0gJGNvdmVyYWdlCiAgICApCgogICAgaWYgKCRzeW50YXhfdGVzdCkgewogICAgICAgICYgIiRVbml0VGVzdGluZ1N1YmxpbWVUZXh0UGFja2FnZXNEaXJlY3Rvcnlcc2JpblxydW5fdGVzdHMucHMxIiAiJGVudjpQQUNLQUdFIiAtdmVyYm9zZSAtc3ludGF4X3Rlc3QKICAgIH0gZWxzZWlmICgkY29sb3Jfc2NoZW1lX3Rlc3QpIHsKICAgICAgICAmICIkVW5pdFRlc3RpbmdTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5XHNiaW5ccnVuX3Rlc3RzLnBzMSIgIiRlbnY6UEFDS0FHRSIgLXZlcmJvc2UgLWNvbG9yX3NjaGVtZV90ZXN0CiAgICB9IGVsc2VpZiAoJGNvdmVyYWdlKSB7CiAgICAgICAgJiAiJFVuaXRUZXN0aW5nU3VibGltZVRleHRQYWNrYWdlc0RpcmVjdG9yeVxzYmluXHJ1bl90ZXN0cy5wczEiICIkZW52OlBBQ0tBR0UiIC12ZXJib3NlIC1jb3ZlcmFnZQogICAgfSBlbHNlIHsKICAgICAgICAmICIkVW5pdFRlc3RpbmdTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5XHNiaW5ccnVuX3Rlc3RzLnBzMSIgIiRlbnY6UEFDS0FHRSIgLXZlcmJvc2UKICAgIH0KCiAgICBzdG9wLXByb2Nlc3MgLWZvcmNlIC1wcm9jZXNzbmFtZSBzdWJsaW1lX3RleHQgLWVhIHNpbGVudGx5Y29udGludWUKICAgIHN0YXJ0LXNsZWVwIC1zZWNvbmRzIDIKfQoKdHJ5ewogICAgc3dpdGNoICgkY29tbWFuZCl7CiAgICAgICAgJ2Jvb3RzdHJhcCcgeyBCb290c3RyYXAgfQogICAgICAgICdpbnN0YWxsX3BhY2thZ2VfY29udHJvbCcgeyBJbnN0YWxsUGFja2FnZUNvbnRyb2wgfQogICAgICAgICdpbnN0YWxsX2NvbG9yX3NjaGVtZV91bml0JyB7IEluc3RhbGxDb2xvclNjaGVtZVVuaXQgfQogICAgICAgICdpbnN0YWxsX2tleXByZXNzcycgeyBJbnN0YWxsS2V5cHJlc3MgfQogICAgICAgICdydW5fdGVzdHMnIHsgUnVuVGVzdHMgLWNvdmVyYWdlOiRjb3ZlcmFnZSB9CiAgICAgICAgJ3J1bl9zeW50YXhfdGVzdHMnIHsgUnVuVGVzdHMgLXN5bnRheF90ZXN0fQogICAgICAgICdydW5fY29sb3Jfc2NoZW1lX3Rlc3RzJyB7IFJ1blRlc3RzIC1jb2xvcl9zY2hlbWVfdGVzdH0KICAgIH0KfWNhdGNoIHsKICAgIHRocm93ICRfCn0=',
    'ci_config.ps1@@@LiAkUFNTY3JpcHRSb290XHV0aWxzLnBzMQoKZnVuY3Rpb24gbWFrZUdsb2JhbENvbnN0YW50IHsKICAgIHBhcmFtKFtzdHJpbmddJE5hbWUsICRWYWx1ZSkKICAgIG5ldy12YXJpYWJsZSAtbmFtZSAkTmFtZSAtdmFsdWUgJFZhbHVlIC1vcHRpb24gY29uc3RhbnQgLXNjb3BlIGdsb2JhbAp9CgojIFRPRE86IElmIHdlIHVzZWQgZGlyZWN0b3J5IGp1bmN0aW9ucyBoZXJlIHRvbywgd2Ugd291bGRuJ3QgbmVlZCB0aGlzPwojIFRoaXMgY29uc3RhbnQgbWVhbnMgdGhhdCB0aGUgZW50aXJlIGNvbnRlbnRzIG9mIHRoZSBzb3VyY2UgZGlyZWN0b3J5IG11c3QgYmUgY29waWVkIHRvIHRoZSB0YXJnZXQgZGlyZWN0b3J5LgptYWtlR2xvYmFsQ29uc3RhbnQgU3ltYm9sQ29weUFsbCAnX19hbGxfXycKbWFrZUdsb2JhbENvbnN0YW50IFN1YmxpbWVUZXh0RGlyZWN0b3J5IChlaXRoZXJPciAkZW52OlNVQkxJTUVfVEVYVF9ESVJFQ1RPUlkgIkM6XHN0IikKbWFrZUdsb2JhbENvbnN0YW50IFN1YmxpbWVUZXh0UGFja2FnZXNEaXJlY3RvcnkgKGVpdGhlck9yICRlbnY6U1VCTElNRV9URVhUX1BBQ0tBR0VTX0RJUkVDVE9SWSAiQzpcc3RcRGF0YVxQYWNrYWdlcyIpCm1ha2VHbG9iYWxDb25zdGFudCBTdWJsaW1lVGV4dEV4ZWN1dGFibGVQYXRoIChqb2luLXBhdGggJFN1YmxpbWVUZXh0RGlyZWN0b3J5ICdzdWJsaW1lX3RleHQuZXhlJykKJGdsb2JhbDpTVFAgPSAkU3VibGltZVRleHRQYWNrYWdlc0RpcmVjdG9yeQptYWtlR2xvYmFsQ29uc3RhbnQgUGFja2FnZVVuZGVyVGVzdE5hbWUgKGVuc3VyZVZhbHVlICRlbnY6UEFDS0FHRSAtbWVzc2FnZSAidGhlIGVudmlyb25tZW50IHZhcmlhYmxlIFBBQ0tBR0UgaXMgbm90IHNldCIpCiMgVE9ETzogRm9yIGNvbXBhdGliaWxpdHk7IHJlbW92ZSB3aGVuIG5vdCB1c2VkIGFueW1vcmUuCm1ha2VHbG9iYWxDb25zdGFudCBQYWNrYWdlTmFtZSAkUGFja2FnZVVuZGVyVGVzdE5hbWUKbWFrZUdsb2JhbENvbnN0YW50IFBhY2thZ2VVbmRlclRlc3RTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5IChqb2luLXBhdGggJFN1YmxpbWVUZXh0UGFja2FnZXNEaXJlY3RvcnkgJFBhY2thZ2VVbmRlclRlc3ROYW1lKQptYWtlR2xvYmFsQ29uc3RhbnQgVW5pdFRlc3RpbmdTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5IChqb2luLXBhdGggJFN1YmxpbWVUZXh0UGFja2FnZXNEaXJlY3RvcnkgJ1VuaXRUZXN0aW5nJykKbWFrZUdsb2JhbENvbnN0YW50IENvdmVyYWdlU3VibGltZVRleHRQYWNrYWdlc0RpcmVjdG9yeSAoam9pbi1wYXRoICRTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5ICdjb3ZlcmFnZScpCm1ha2VHbG9iYWxDb25zdGFudCBDb2xvclNjaGVtZVVuaXRTdWJsaW1lVGV4dFBhY2thZ2VzRGlyZWN0b3J5IChqb2luLXBhdGggJFN1YmxpbWVUZXh0UGFja2FnZXNEaXJlY3RvcnkgJ0NvbG9yU2NoZW1lVW5pdCcpCm1ha2VHbG9iYWxDb25zdGFudCBLZXlQcmVzc1N1YmxpbWVUZXh0UGFja2FnZXNEaXJlY3RvcnkgKGpvaW4tcGF0aCAkU3VibGltZVRleHRQYWNrYWdlc0RpcmVjdG9yeSAnS2V5cHJlc3MnKQptYWtlR2xvYmFsQ29uc3RhbnQgU3VibGltZVRleHRWZXJzaW9uIChlbnN1cmVWYWx1ZSAkZW52OlNVQkxJTUVfVEVYVF9WRVJTSU9OICdeMnwzJCcgLW1lc3NhZ2UgInRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBTVUJMSU1FX1RFWFRfVkVSU0lPTiBtdXN0IGJlIHNldCB0byAnMicgb3IgJzMnIikKbWFrZUdsb2JhbENvbnN0YW50IFVuaXRUZXN0aW5nUmVwb3NpdG9yeVVybCAiaHR0cHM6Ly9naXRodWIuY29tL3JhbmR5M2svVW5pdFRlc3RpbmciCm1ha2VHbG9iYWxDb25zdGFudCBDb3ZlcmFnZVJlcG9zaXRvcnlVcmwgImh0dHBzOi8vZ2l0aHViLmNvbS9jb2RleG5zL3N1YmxpbWUtY292ZXJhZ2UiCm1ha2VHbG9iYWxDb25zdGFudCBDb2xvclNjaGVtZVVuaXRSZXBvc2l0b3J5VXJsICJodHRwczovL2dpdGh1Yi5jb20vZ2VyYXJkcm9jaGUvc3VibGltZS1jb2xvci1zY2hlbWUtdW5pdCIKbWFrZUdsb2JhbENvbnN0YW50IEtleVByZXNzUmVwb3NpdG9yeVVybCAiaHR0cHM6Ly9naXRodWIuY29tL3JhbmR5M2svS2V5cHJlc3MiCm1ha2VHbG9iYWxDb25zdGFudCBJc1N1YmxpbWVUZXh0MyAoJFN1YmxpbWVUZXh0VmVyc2lvbiAtZXEgMykKbWFrZUdsb2JhbENvbnN0YW50IElzU3VibGltZVRleHQyICgkU3VibGltZVRleHRWZXJzaW9uIC1lcSAyKQoKIyBUT0RPOiBJcyB0aGlzIHNwZWNpZmljIHRvIHRoZSBDSSBzZXJ2aWNlPwojIFN1cHJlc3Mgc29tZSBnaXQgd2FybmluZ3MKZ2l0IGNvbmZpZyAtLWdsb2JhbCBhZHZpY2UuZGV0YWNoZWRIZWFkIGZhbHNl'
    )

    filter local:convertFromBase64String {
        param([string]$Content)
        $theContent = if ($_) { $_ } else { $Content }
        $utf8.GetString([System.Convert]::FromBase64String($theContent))
    }

    function local:createTextFile {
        param([string]$Destination, [string]$Content)
        if (![System.IO.Path]::IsPathRooted($Destination)) {
            throw "absolute path expected, got: $Path"
        }
        if (test-path $Destination) {
            throw "cannot write file $Destination if it already exists"
        }
        [System.IO.File]::WriteAllText($Destination, $Content, $utf8)
    }

    filter local:unpackFile {
        param($Content)
        $theContent = if ($_) { $_ } else { $Content }
        $elements = @($theContent -split '@@@')
        for ($i = 0; $i -lt $elements.length; $i = $i + 2) {
            createTextFile (join-path (convert-path .) $elements[$i]) ($elements[$i+1] | convertFromBase64String)
        }
    }

    push-location $UnitTestingPowerShellScriptsDirectory
        $encodedDependencies | unpackFile
    pop-location

    $env:UNITTESTING_BOOTSTRAPPED = 1
}

# Dependencies are now available to this script.
. $UnitTestingPowerShellScriptsDirectory\utils.ps1

# logWarning "the appveyor.ps1 script is deprecated; use ci.ps1 instead"

& $UnitTestingPowerShellScriptsDirectory\ci.ps1 @PSBoundParameters
